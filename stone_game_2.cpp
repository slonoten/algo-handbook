/* –í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ –∏–≥—Ä—É <<–ö–∞–º–Ω–∏>>: –∏–≥—Ä—É –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–≤—É–º—è –Ω–∞–±–æ—Ä–∞–º–∏ –∫–∞–º–Ω–µ–π –ø–æ 
ùëõ
n –∏ 
ùëö
m —à—Ç—É–∫. –° –∫–∞–∂–¥—ã–º —Ö–æ–¥–æ–º –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∑–∞–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–∞–º–Ω–µ–π:

–í–∑—è—Ç—å –æ–¥–∏–Ω –∫–∞–º–µ–Ω—å –∏–∑ –ª—é–±–æ–≥–æ –Ω–∞–±–æ—Ä–∞.
–í–∑—è—Ç—å –¥–≤–∞ –∫–∞–º–Ω—è –∏–∑ –∫–∞–∫–æ–≥–æ-—Ç–æ –æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
–í–∑—è—Ç—å –¥–≤–∞ –∫–∞–º–Ω—è –∏–∑ –æ–¥–Ω–æ–≥–æ –∏ –æ–¥–∏–Ω –∏–∑ –¥—Ä—É–≥–æ–≥–æ.
–ö–æ–≥–¥–∞ –∫–∞–º–µ–Ω—å –∑–∞–±—Ä–∞–ª–∏, –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∏–≥—Ä—ã. –ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–º–µ–Ω—å. –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ –≤–∞–º–∏.

–í—ã –∏ –≤–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–∞–µ—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ. */

/*
lwwlwu
wlwwlu
wwlwwu
lwwluu
wlww
*/


#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;




bool isWin(size_t n, size_t m, vector<vector<bool> >& predicts);

int main() {
    size_t n, m;
    cin >> n >> m;
    auto predicts = vector<vector<bool> >(n + 1, vector(m + 1, true));
    for (size_t i = 0; i <= n; i++) {
        for (size_t j = 0; j <= m; j++) {
            predicts[i][j] = isWin(i, j, predicts);
        }
    }

    if (predicts[n][m]) {
        cout << "Win";
    } else {
        cout << "Loose";
    }
}


bool isWin(size_t n, size_t m, vector<vector<bool> >& predicts) {
    if (n > 0 && !predicts[n - 1][m])
        return true;
    if (m > 0 && !predicts[n][m - 1])
        return true;
    if (n > 1 && !predicts[n - 2][m])
        return true;
    if (m > 1 && !predicts[n][m - 2])
        return true;
    if (n > 1 && m > 0 && !predicts[n - 2][m - 1])
        return true;
    if (n > 0 && m > 1 && !predicts[n - 1][m - 2])
        return true;
    return false;
}